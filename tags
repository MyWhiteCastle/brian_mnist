!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	xor.py	/^A=0.02$/;"	v
AddNetwork	initial.py	/^def AddNetwork(neuron_groups, synapse_groups, state_monitors, spike_monitors, parameters):$/;"	f
AllSpikeMonitors	initial.py	/^def AllSpikeMonitors(neuron_groups, spike_monitor_names):$/;"	f
B	xor.py	/^B=0.2$/;"	v
BinSearchWeights	initial.py	/^        state_monitor_names, spike_monitor_names, parameters, end='low'):$/;"	f
C	xor.py	/^C=-65.0$/;"	v
Compare	train.py	/^def Compare(S_l, S_d):$/;"	f
D	xor.py	/^D=6.0$/;"	v
DesiredOut	train.py	/^def DesiredOut(label, bench):$/;"	f
F	xor.py	/^F = open("train_results.txt", 'w')$/;"	v
GetInSpikes	snn.py	/^def GetInSpikes(img, bench='mnist'):$/;"	f
GetSpikes	initial.py	/^def GetSpikes(net, T, v0, u0, I0, ge0, neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters, number=5):$/;"	f
GetWeightRange	initial.py	/^def GetWeightRange(net, T, num_spikes, v0, u0, I0, ge0, neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters, number=5):$/;"	f
I0	xor.py	/^I0 = 0*br.mV \/ br.ms$/;"	v
L	train.py	/^def L(t):$/;"	f
N	xor.py	/^N = 1$/;"	v
N_h	xor.py	/^N_h = 1$/;"	v
N_hidden	xor.py	/^N_hidden = [14]$/;"	v
N_in	xor.py	/^N_in = 2$/;"	v
N_in	xor.py	/^N_in = len(train_mnist[0][0])#(XX[0] * XX[1] * XX[2]) + (YY[0] * YY[1] * YY[2])$/;"	v
N_liquid	xor.py	/^N_liquid = 0#[4, 5, 12] # Total, liquid in, liquid out$/;"	v
N_o	xor.py	/^N_o = 1$/;"	v
N_out	xor.py	/^N_out = 4$/;"	v
N_test	xor.py	/^N_test = len(c1_test)$/;"	v
N_train	xor.py	/^N_train = len(c1_train)$/;"	v
OutputTimeRange	initial.py	/^def OutputTimeRange(net, T, N_h, N_o, v0, u0, I0, ge0, neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters):$/;"	f
P_Index	snn.py	/^def P_Index(S_d, S_l):$/;"	f
P_Index	train.py	/^def P_Index(S_l, S_d):$/;"	f
Pc	xor.py	/^Pc = 0.013$/;"	v
Plot	snn.py	/^def Plot(monitor, number):$/;"	f
ReSuMe	train.py	/^def ReSuMe(net, mnist, start, end, Pc, N_hidden, T, N_h, N_o, v0, u0, I0, ge0, neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters):$/;"	f
ReadImg	snn.py	/^def ReadImg(number=1, mnist=None, letter=None, bench='mnist', levels=None):$/;"	f
ReadTimes	initial.py	/^def ReadTimes(file_name):$/;"	f
ReadTimes	train.py	/^def ReadTimes(filename):$/;"	f
Run	snn.py	/^def Run(net, mnist, number, T, v0, u0, I0, ge0, neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters):$/;"	f
SetInitStates	initial.py	/^def SetInitStates(net, N_in, vr, v0, u0, I0, ge0, neuron_names, bench='xor'):$/;"	f
SetNeuronGroups	initial.py	/^        eqs_hidden_neurons, reset, neuron_names):$/;"	f
SetSynapseInitialWeights	initial.py	/^def SetSynapseInitialWeights(net, synapse_names, N_hidden):$/;"	f
SetSynapses	initial.py	/^def SetSynapses(neuron_groups, synapse_names):$/;"	f
SetWeights	initial.py	/^         neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters):$/;"	f
SpikeMonitor	initial.py	/^def SpikeMonitor(neuron_groups, index_str):$/;"	f
StateMonitors	initial.py	/^def StateMonitors(neuron_groups, index_str, index_record=0):$/;"	f
T	xor.py	/^T = 8$/;"	v
Test	train.py	/^        neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters):$/;"	f
TestNodeRange	initial.py	/^def TestNodeRange(net, T, num_spikes, v0, u0, I0, ge0, neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters):$/;"	f
WeightChange	train.py	/^def WeightChange(s):$/;"	f
_basic_training	initial.py	/^def _basic_training(net, neuron_str, synapse_str, spike_monitor_str, number, dw_abs, D_spikes):$/;"	f
_compatible_dimensions	initial.py	/^def _compatible_dimensions(net, synapse_name_single):$/;"	f
_correct_weights_exist	initial.py	/^def _correct_weights_exist(net, synapse_names, a, b):$/;"	f
_initconditions	initial.py	/^def _initconditions(net, string, v0, u0, I0, ge0):$/;"	f
_modify_layer_weights	initial.py	/^def _modify_layer_weights(net, spikes, neuron_str, synapse_str, number, dw_abs, D_spikes):$/;"	f
_modify_neuron_weights	initial.py	/^def _modify_neuron_weights(net, neuron_str, synapse_str, neuron_index, dv, N_neurons):$/;"	f
_modify_weights	initial.py	/^def _modify_weights(S, dv):$/;"	f
_netoutput	train.py	/^def _netoutput(net, spike_monitor_names, N_hidden):$/;"	f
_network	initial.py	/^def _network(net, group):$/;"	f
_neuron_group_index	initial.py	/^def _neuron_group_index(index_str):$/;"	f
_neuronindices	initial.py	/^def _neuronindices(N_hidden):$/;"	f
_neuroninitconditions	initial.py	/^def _neuroninitconditions(net, neuron_names, v0, u0, I0, ge0):$/;"	f
_number_lines	initial.py	/^def _number_lines(synapse_name_single):$/;"	f
_read_network_weights	initial.py	/^def _read_network_weights(net, synapse_names):$/;"	f
_read_weights	initial.py	/^def _read_weights(synapse_names, a, b):$/;"	f
_readweights	initial.py	/^def _readweights(net, synapse_names, a, b):$/;"	f
_resume_step	train.py	/^def _resume_step(index, ta, tb, w):$/;"	f
_same_num_spikes	initial.py	/^def _same_num_spikes(indices):$/;"	f
_save_network_weights	initial.py	/^def _save_network_weights(net, synapse_names):$/;"	f
_save_single_weight	initial.py	/^def _save_single_weight(synapses, file_name_w, file_name_d):$/;"	f
_save_weights	initial.py	/^def _save_weights(net, synapse_names, a, b):$/;"	f
_save_weights_meta	initial.py	/^def _save_weights_meta(net, synapse_names, wset=None):$/;"	f
_set_out_spike	train.py	/^def _set_out_spike(net, index, S_i, l, d):$/;"	f
_string_to_weights	initial.py	/^def _string_to_weights(string, unit):$/;"	f
_synapseindices	initial.py	/^def _synapseindices(N_hidden):$/;"	f
_trained	initial.py	/^def _trained():$/;"	f
a	xor.py	/^a = A \/ br.ms$/;"	v
b	xor.py	/^b = B$/;"	v
bench	xor.py	/^bench = bench$/;"	v
bench	xor.py	/^bench='xor'$/;"	v
c	xor.py	/^c = C*br.mV$/;"	v
c1	array.py	/^c1 = scipy.io.loadmat('data-600.mat')['c1'][0]$/;"	v
c1_test	xor.py	/^c1_test = scipy.io.loadmat('\/home\/sami\/Desktop\/mnist-train\/test-1.mat')['c1b'][0][0:20]$/;"	v
c1_train	xor.py	/^c1_train = scipy.io.loadmat('\/home\/sami\/Desktop\/mnist-train\/train-1.mat')['c1a'][0][0:20]$/;"	v
c2	array.py	/^c2 = rflatten_obj(c1)$/;"	v
check_number_spikes	initial.py	/^        neuron_names, spike_monitor_names):$/;"	f
collect_spikes	initial.py	/^def collect_spikes(indices, spikes, N_neurons):$/;"	f
count	xor.py	/^count = 0$/;"	v
d	xor.py	/^d = D*br.mV$/;"	v
d_w	snn.py	/^def d_w(S_d, S_l, S_in):$/;"	f
elapsed_time	xor.py	/^elapsed_time = time.time() - start_time$/;"	v
g	xor.py	/^g = 2$/;"	v
ge0	xor.py	/^ge0 = 0*br.mV$/;"	v
img	xor.py	/^img = np.empty(img_dims)$/;"	v
img_dims	xor.py	/^img_dims = 1$/;"	v
levels	xor.py	/^levels = 1$/;"	v
levels	xor.py	/^levels=4$/;"	v
make2dList	snn.py	/^def make2dList(rows, cols):$/;"	f
n_inputs	xor.py	/^n_inputs = 1$/;"	v
net	xor.py	/^                neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters)$/;"	v
net	xor.py	/^net = init.AddNetwork(neuron_groups, synapse_groups, state_monitors, spike_monitors, parameters)$/;"	v
net	xor.py	/^net = init.SetInitStates(net, N_in, vr, v0, u0, I0, ge0, neuron_names)$/;"	v
net	xor.py	/^net = init.SetSynapseInitialWeights(net, synapse_names, N_hidden)$/;"	v
neuron_groups	xor.py	/^            parameters, eqs_hidden_neurons, reset, neuron_names)$/;"	v
neuron_names	xor.py	/^neuron_names = ['input', 'hidden', 'out']$/;"	v
objects	xor.py	/^objects = []$/;"	v
out	initial.py	/^def out(label):$/;"	f
out_inverse	initial.py	/^def out_inverse(S_d):$/;"	f
parameters	xor.py	/^parameters = [a, b, c, d, tau, vt, vr]$/;"	v
rflatten	xor.py	/^def rflatten(A):$/;"	f
rflatten_obj	array.py	/^def rflatten_obj(A):$/;"	f
set_number_spikes	initial.py	/^def set_number_spikes(net, mnist, layer, T, N_h, N_o, v0, u0, I0, ge0, neuron_names, synapse_names, state_monitor_names, spike_monitor_names, parameters):$/;"	f
spike_monitor_names	xor.py	/^spike_monitor_names = ['sm_in', 'sm_h', 'sm_out']$/;"	v
spike_monitors	xor.py	/^spike_monitors = init.AllSpikeMonitors(neuron_groups, spike_monitor_names)$/;"	v
start_time	xor.py	/^start_time = time.time()$/;"	v
state_monitor_hidden	xor.py	/^state_monitor_hidden = init.StateMonitors(neuron_groups, 'hidden', index_record=0)$/;"	v
state_monitor_in	xor.py	/^state_monitor_in = init.StateMonitors(neuron_groups, 'input', index_record=1)$/;"	v
state_monitor_names	xor.py	/^state_monitor_names = ['out_ge', 'out_v', 'out_u']$/;"	v
state_monitor_out	xor.py	/^state_monitor_out = init.StateMonitors(neuron_groups, 'output', index_record=0) $/;"	v
state_monitors	xor.py	/^state_monitors = [state_monitor_in, state_monitor_hidden, state_monitor_out]$/;"	v
synapse_groups	xor.py	/^synapse_groups = init.SetSynapses(neuron_groups, synapse_names)$/;"	v
synapse_names	xor.py	/^synapse_names = ['Si', 'Sl']$/;"	v
tau	xor.py	/^tau = tau*br.ms$/;"	v
tau	xor.py	/^tau=2.0$/;"	v
test_features	xor.py	/^test_features = np.empty(N_test, dtype=object)$/;"	v
test_labels	xor.py	/^test_labels = scipy.io.loadmat('\/home\/sami\/Desktop\/mnist-train\/test-label.mat')['test_labels_body'][0:20]$/;"	v
test_mnist	xor.py	/^test_mnist = [test_features, test_labels]$/;"	v
trace_calls	xor.py	/^def trace_calls(frame, event, arg):$/;"	f
train_features	xor.py	/^train_features = np.empty(N_train, dtype=object)$/;"	v
train_labels	xor.py	/^train_labels = scipy.io.loadmat('\/home\/sami\/Desktop\/mnist-train\/train-label.mat')['train_labels_body'][0:20]$/;"	v
train_mnist	xor.py	/^train_mnist = [train_features, train_labels]$/;"	v
u0	xor.py	/^u0 = ((25*(-5*A*B + A**2 * B**2)) + 0) * br.mV$/;"	v
u0	xor.py	/^u0 = (-8.588384 - 0*12)*br.mV$/;"	v
v0	xor.py	/^v0 = ((25*(-5 + A**2 * B**2)) + 40) * br.mV$/;"	v
v0	xor.py	/^v0 = vr + 0*10*br.mV$/;"	v
vr	xor.py	/^vr = -74 * br.mV$/;"	v
vr	xor.py	/^vr = -76.151418 * br.mV$/;"	v
vt	xor.py	/^vt = -15 * br.mV$/;"	v
